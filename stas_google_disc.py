import re
import os
import tempfile
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from openpyxl import Workbook
from bs4 import BeautifulSoup
from pydrive2.auth import GoogleAuth
from pydrive2.drive import GoogleDrive

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ---
def assign_category(name):
    if not name:
        return "–ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–û"
    name_lower = name.lower()
    if any(k in name_lower for k in ["ÏÑ†ÌÅ¨Î¶º", "sun screen", "spf", "sun care"]):
        return "SUN CARE I –ó–ê–©–ò–¢–ê –û–¢ –°–û–õ–ù–¶–ê"
    if any(k in name_lower for k in ["ÎØ∏ÏÖÄÎùº", "micellar", "cleanser", "peeling"]):
        return "CLEANSING I –û–ß–ò–©–ï–ù–ò–ï"
    if any(k in name_lower for k in ["Ïï∞Ìîå", "ampoule","cream","serum","moisturizer"]):
        return "SKIN CARE I –£–•–û–î –ó–ê –õ–ò–¶–û–ú"
    if any(k in name_lower for k in ["Î∞îÎîî", "body", "lotion","scrub","shower"]):
        return "BODY CARE I –£–•–û–î –ó–ê –¢–ï–õ–û–ú"
    if any(k in name_lower for k in ["ÏÉ¥Ìë∏","shampoo","conditioner","hair"]):
        return "HAIR CARE I –£–•–û–î –ó–ê –í–û–õ–û–°–ê–ú–ò"
    if any(k in name_lower for k in ["Î¶Ω", "lip", "foundation","blush","makeup"]):
        return "MAKE UP I –î–ï–ö–û–†–ê–¢–ò–í–ù–´–ô –ú–ê–ö–ò–Ø–ñ"
    if any(k in name_lower for k in ["ÏÑ∏Ìä∏", "set", "kit"]):
        return "SKIN CARE SET I –£–•–û–î–û–í–´–ï –ù–ê–ë–û–†–´"
    if any(k in name_lower for k in ["ÎÇ®ÏÑ±", "men","for men"]):
        return "FOR MEN / –î–ª—è –º—É–∂—á–∏–Ω"
    if any(k in name_lower for k in ["ÏÉòÌîå", "sample","mini","travel"]):
        return "SAMPLE | –ü–†–û–ë–ù–ò–ö–ò"
    if any(k in name_lower for k in ["supplement", "vitamin","omega","probiotic"]):
        return "–ë–ê–î–´"
    if any(k in name_lower for k in ["perfume","bag","toothpaste","hand sanitizer"]):
        return "–¢–û–í–ê–†–´ –î–õ–Ø –î–û–ú–ê –ò –ó–î–û–†–û–í–¨–Ø"
    return "–ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–û"

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—Ä–µ–Ω–¥–æ–º ---
def extract_brand_name(brand_url):
    brand_cd = brand_url.split("brand_cd=")[-1]
    brand_name_map = {
        "BR000357": "9Wishes",
        "BR001115": "ABEREDE",
        "BR000311": "Abib",
        "BR000067": "ACWELL",
        "BR000473": "AESTURA",
        "BR000457": "AHEADS",
        "BR000091": "A.H.C",
        # –¥–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±—Ä–µ–Ω–¥—ã
    }
    return brand_name_map.get(brand_cd, brand_cd)

def handle_alert(driver):
    try:
        WebDriverWait(driver, 2).until(EC.alert_is_present())
        alert = driver.switch_to.alert
        alert.accept()
        print("‚ö†Ô∏è Alert accepted")
    except:
        pass

# --- –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä ---
def login_and_scrape(username, password):
    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Drive ---
    gauth = GoogleAuth()
    gauth.LocalWebserverAuth()
    drive = GoogleDrive(gauth)
    folder_id = "–í–ê–®_FOLDER_ID"  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –ø–∞–ø–∫–∏
    file_name = "products.xlsx"
    file_path = os.path.join(os.getcwd(), file_name)

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Excel ---
    wb = Workbook()
    ws = wb.active
    ws.append([
        "img_src","brand_name","name","category","unit","moq","quantity",
        "pieces_per_box","item_code","product_code","price_discounted",
        "cena_na_site","price","lang","pieces_per_box2","all","qty","price_old",
        "STATUS","status_value","procent"
    ])

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Selenium ---
    options = Options()
    options.add_argument("--headless=new")
    options.add_argument("--disable-gpu")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--window-size=1920,1080")
    options.add_argument("--disable-notifications")

    tmp_dir = tempfile.mkdtemp()
    options.add_argument(f"--user-data-dir={tmp_dir}")

    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=options)

    # --- –õ–æ–≥–∏–Ω ---
    driver.get("URL_–í–û–ô–¢–ò")  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ URL –≤—Ö–æ–¥–∞
    print("‚ö° –û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞")
    # TODO: –¥–æ–±–∞–≤—å—Ç–µ —à–∞–≥–∏ –ª–æ–≥–∏–Ω–∞ —á–µ—Ä–µ–∑ driver.find_element(...)

    # --- –°–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤ ---
    brand_urls = [
        "https://example.com?brand_cd=BR000357",
        "https://example.com?brand_cd=BR001115",
        # –¥–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
    ]

    for brand_url in brand_urls:
        brand_name = extract_brand_name(brand_url)
        print(f"üì¶ Scraping products for brand: {brand_name}")

        driver.get(brand_url)
        handle_alert(driver)
        try:
            WebDriverWait(driver, 15).until(EC.presence_of_element_located((By.CLASS_NAME, "album")))
        except:
            print(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç 'album' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {brand_url}")
            continue

        page_links = driver.find_elements(By.CLASS_NAME, "page-link")
        num_pages = len(page_links) if page_links else 1
        if len(page_links) >= 3:
            num_pages_element = page_links[-3]
            num_pages_label = num_pages_element.get_attribute("aria-label")
            if num_pages_label:
                try:
                    num_pages = int(num_pages_label.split()[-1])
                except:
                    num_pages = 1

        for page_num in range(1, num_pages + 1):
            print(f"üîπ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_num}/{num_pages}")
            handle_alert(driver)
            time.sleep(3)  # –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            try:
                WebDriverWait(driver, 15).until(EC.presence_of_element_located((By.CLASS_NAME, "album")))
            except:
                print(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç 'album' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num}")
                continue

            soup = BeautifulSoup(driver.page_source, 'html.parser')
            product_cards = soup.find_all("div", class_="card mb-4 shadow-sm")

            for card in product_cards:
                try:
                    name = card.find("span", class_="productTxt").text.strip()
                    category = assign_category(name)
                    item_code = card.find("span", class_="productCodeTxt").text.split("SKU:")[1].strip()
                    quantity_availabl_element = card.find("span", class_="qtyTxt")
                    quantity_availabl = quantity_availabl_element.text.strip().replace('ea','').split()[0].replace(',','') if quantity_availabl_element else None
                    img_element = card.find("img", class_="Img_Product")
                    img_src = img_element.get('src') if img_element else None
                    moq_element = card.find("span", class_="moqTxt")
                    moq = moq_element.text.split(":")[-1].replace("ea","").strip() if moq_element else None
                    Product_code = card.find("span", class_="barcodeTxt").text.strip().split(":")[1].strip()
                    pieces_per_box_element = card.find("span", class_="boxCnt")
                    if pieces_per_box_element:
                        pieces_per_box = pieces_per_box_element.text.split(':')[-1].strip().replace('ea','').replace(')','').replace(',','')
                        if not pieces_per_box:
                            pieces_per_box = '20'
                    else:
                        pieces_per_box = '20'
                    price_discounted_element = card.find("span", class_="priceTxt")
                    price_discounted = float(price_discounted_element.text.strip().replace("KRW","").replace(",","").replace(".00","")) if price_discounted_element else 0
                    price_old_element = card.find("span", class_="priceOld2")
                    price_old = float(price_old_element.text.strip().replace("KRW","").replace(",","").replace(".00","")) if price_old_element else None
                    cena_na_site = round(price_discounted * 1.2 / 1250, 2)
                    price = round(price_discounted * 1.1 / 1250, 2)
                    cena_na_site_str = f"{cena_na_site:.2f}".replace(",", ".")
                    price_str = f"{price:.2f}".replace(",", ".")

                    item_code_clean = re.sub(r'\s+', '', item_code)
                    product_code_clean = re.sub(r'\s+', '', Product_code)
                    status_value = f"–ë—Ä–µ–Ω–¥///{brand_name[0].upper()}///{brand_name}"
                    STATUS="A"
                    procent= round(price_discounted / price_old , 2) if price_old else 0

                    ws.append([
                        img_src, brand_name, name, category, 'ea', moq, quantity_availabl,
                        pieces_per_box, item_code_clean, product_code_clean, price_discounted,
                        cena_na_site_str, price_str, 'ru', pieces_per_box, '–í—Å–µ', '1', price_old,
                        STATUS, status_value, procent
                    ])
                except Exception as e:
                    print("‚ùå Error parsing product:", e)

            # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º Excel –ª–æ–∫–∞–ª—å–Ω–æ ---
            try:
                wb.save(file_path)
                print(f"‚úÖ File saved successfully after page {page_num}")
            except Exception as e:
                print("‚ùå Error saving file:", e)

            # --- –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ Google Drive ---
            try:
                query = f"'{folder_id}' in parents and trashed=false and title='{file_name}'"
                file_list = drive.ListFile({'q': query}).GetList()

                if file_list:
                    file_drive = file_list[0]
                    print(f"–§–∞–π–ª –Ω–∞–π–¥–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ...")
                else:
                    file_drive = drive.CreateFile({'title': file_name, 'parents': [{'id': folder_id}]})
                    print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π...")

                file_drive.SetContentFile(file_path)
                file_drive.Upload()
                print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ Google Drive –ø–æ—Å–ª–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num}")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –Ω–∞ Google Drive: {e}")

            # --- –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ---
            if page_num < num_pages:
                try:
                    next_page_button = driver.find_element(By.XPATH, f"//a[@class='page-link' and @page='{page_num + 1}']")
                    next_page_button.click()
                except Exception as e:
                    print(f"‚ö†Ô∏è Error clicking next page: {e}")
                    break

    driver.quit()
    print("üéØ Scraping completed.")

# --- –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ ---
if __name__ == "__main__":
    login_and_scrape("beelifecos", "1983beelif")
